/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package sistemapasajes.View;

import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import sistemapasajes.GenerarQR;
import sistemapasajes.PDF;
import sistemapasajes.Sunat;
import sistemapasajes.dao.ComprobanteDAO;
import sistemapasajes.dao.ComprobanteDAOImpl;
import sistemapasajes.dao.ConfiguracionDAO;
import sistemapasajes.dao.ConfiguracionDAOImpl;
import sistemapasajes.dao.DcomprobanteDAO;
import sistemapasajes.dao.DcomprobanteDAOImpl;
import sistemapasajes.dao.EmpresaDAO;
import sistemapasajes.dao.EmpresaDAOImpl;
import sistemapasajes.dao.RutaArchivoDAO;
import sistemapasajes.dao.RutaArchivoDAOImpl;
import sistemapasajes.modelo.ComprobanteModel;
import sistemapasajes.modelo.ConfiguracionModel;
import sistemapasajes.modelo.DcomprobanteModel;
import sistemapasajes.modelo.EmpresaModel;
import sistemapasajes.modelo.RutaArchivoModel;

/**
 *
 * @author edson
 */
public class Lpasajespdf extends javax.swing.JInternalFrame {

    String rutahash;
    String rutaqr;

    public Lpasajespdf() {
        initComponents();
       
        try {
            VerificarComprobante();
        } catch (IOException ex) {
            Logger.getLogger(Lpasajespdf.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "AQUI " + ex, "Error", JOptionPane.ERROR_MESSAGE);
        }
         CargarPasajes();
    }

    private void CargarPasajes() {
        DefaultTableModel modeloTabla = new DefaultTableModel();

        modeloTabla.addColumn("N° Comprobante");
        modeloTabla.addColumn("Tipo Comprobante");
        modeloTabla.addColumn("Razón Social");
        modeloTabla.addColumn("N° Documento");
        modeloTabla.addColumn("Fecha");
        modeloTabla.addColumn("Monto");
        ComprobanteDAO comprobantedao = new ComprobanteDAOImpl();
        //List<ComprobanteModel> comprobantes = comprobantedao.obtenerTodosComprobantes();
        List<ComprobanteModel> comprobantes = comprobantedao.obtenerComprobantesporEstado("PDF GENERADO");
        for (ComprobanteModel comprobante : comprobantes) {
            Object[] fila = {
                comprobante.getSerieComp(),
                comprobante.getTipoComp(),
                comprobante.getClienteComp(),
                comprobante.getDocclienteComp(),
                comprobante.getFechaComp(),
                comprobante.getImptotalComp()
            };
            modeloTabla.addRow(fila);
        }
        tabpasajes.setModel(modeloTabla);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabpasajes = new javax.swing.JTable();
        btnpdf = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btncargar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Lista de Pasajes con PDF");

        tabpasajes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabpasajes);

        btnpdf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/pdf.png"))); // NOI18N
        btnpdf.setText("Crear PDF");
        btnpdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnpdfActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/lupa.png"))); // NOI18N
        jButton1.setText("Ver Pasajes sin XML");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btncargar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/actualizar.png"))); // NOI18N
        btncargar.setText("Actualizar Tabla");
        btncargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncargarActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/archivo-ejecutable.png"))); // NOI18N
        jButton2.setText("Ver Pasajes con XML");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 820, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btncargar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnpdf)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnpdf)
                    .addComponent(jButton1)
                    .addComponent(btncargar)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnpdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnpdfActionPerformed
        RutaArchivoDAO rutaarchivodao = new RutaArchivoDAOImpl();

        String rhash;
        String rutaqrgen = null;

        ConfiguracionDAO configdao = new ConfiguracionDAOImpl();
        ConfiguracionModel configuracion = configdao.obtenerConfiguracionPorId(1);

        ComprobanteDAO comprobantedao = new ComprobanteDAOImpl();
        ComprobanteModel comprobante = new ComprobanteModel();

// Obtener el índice de la fila seleccionada
        int indiceFilaSeleccionada = tabpasajes.getSelectedRow();

        // Verificar si se ha seleccionado una fila
        if (indiceFilaSeleccionada != -1) {
            // Obtener los datos de la fila seleccionada
            String numComprobante = tabpasajes.getValueAt(indiceFilaSeleccionada, 0).toString();
            String tipoComprobante = tabpasajes.getValueAt(indiceFilaSeleccionada, 1).toString();
            String razonSocial = tabpasajes.getValueAt(indiceFilaSeleccionada, 2).toString();
            String numDocumento = tabpasajes.getValueAt(indiceFilaSeleccionada, 3).toString();
            String fecha = tabpasajes.getValueAt(indiceFilaSeleccionada, 4).toString();
            String monto = tabpasajes.getValueAt(indiceFilaSeleccionada, 5).toString();
            //String tipo;
            RutaArchivoModel rutaarchivo = rutaarchivodao.obtenerRutaporEmpresa(configuracion.getRucConf(), "hash");
            RutaArchivoModel rutaqr = rutaarchivodao.obtenerRutaporEmpresa(configuracion.getRucConf(), "qr");
            String rqr = rutaqr.getDescRutaArchivo() + configuracion.getRucConf() + "-";
            String datos;
        
            String ruta = rutaarchivo.getDescRutaArchivo() + configuracion.getRucConf() + "-" + tipoComprobante + "-" + numComprobante + ".xml";
            Sunat sunat = new Sunat();
            try {

                System.out.println(ruta);

                rhash = Sunat.getHash(ruta);
                System.out.println(rhash);
                comprobante.setHashComp(rhash);
                comprobante.setSerieComp(numComprobante);
                comprobantedao.actualizarComprobanteHash(comprobante);

                datos = configuracion.getRucConf() + "|"
                        + tipoComprobante + "|" + numComprobante + "|"
                        + monto + "|" + numDocumento + "|" + rhash;
                GenerarQR genqr = new GenerarQR();
                genqr.GenerarQR(datos, numComprobante, rqr);
                rutaqrgen = rqr + numComprobante + ".jpg";

                //Actualizar el Estado
                comprobante.setEstadoComp("PDF GENERADO");
                comprobantedao.actualizarPorEstadoComprobante(comprobante);

            } catch (IOException ex) {
                System.out.println("error: " + ex);
                JOptionPane.showMessageDialog(this, "Error: " + ex, "Error", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(Lpasajespdf.class.getName()).log(Level.SEVERE, null, ex);
            }

            // Ahora puedes utilizar estos datos para crear un PDF o realizar cualquier otra acción
            // Por ejemplo, puedes pasar estos datos a un método de creación de PDF
            ComprobanteModel datoscomprobante = comprobantedao.obtenerComprobanteporNum(numComprobante);
            DcomprobanteDAO dcomprobantedao = new DcomprobanteDAOImpl();
            DcomprobanteModel datosdetcomprobante = dcomprobantedao.obtenerDcomprobanteporNum(numComprobante);

            EmpresaDAO empresadao = new EmpresaDAOImpl();
            EmpresaModel empresa = empresadao.obtenerEmpresaporRuc(numDocumento);

            PDF pdf = new PDF();

            pdf.crearPDF(configuracion, datoscomprobante, datosdetcomprobante, empresa, rutaqrgen);
        } else {
            // No se ha seleccionado ninguna fila, puedes mostrar un mensaje o realizar cualquier otra acción
            System.out.println("Ninguna fila seleccionada");
        }
    }//GEN-LAST:event_btnpdfActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
               this.dispose();
        JInternalFrame internalFrame = new Lpasajessinxml();

                Principal.jDesktopPane1.add(internalFrame);
                // Calcular la posición para centrar el JInternalFrame
                Dimension desktopSize = Principal.jDesktopPane1.getSize();
                Dimension jInternalFrameSize = internalFrame.getSize();

                int posX = (desktopSize.width - jInternalFrameSize.width) / 2;
                int posY = (desktopSize.height - jInternalFrameSize.height) / 2;

                // Establecer la ubicación centrada
                internalFrame.setLocation(posX, posY);

                internalFrame.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btncargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncargarActionPerformed
        this.dispose();
        JInternalFrame internalFrame = new Lpasajespdf();

                Principal.jDesktopPane1.add(internalFrame);
                // Calcular la posición para centrar el JInternalFrame
                Dimension desktopSize = Principal.jDesktopPane1.getSize();
                Dimension jInternalFrameSize = internalFrame.getSize();

                int posX = (desktopSize.width - jInternalFrameSize.width) / 2;
                int posY = (desktopSize.height - jInternalFrameSize.height) / 2;

                // Establecer la ubicación centrada
                internalFrame.setLocation(posX, posY);

                internalFrame.setVisible(true);
    }//GEN-LAST:event_btncargarActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
              this.dispose();
        JInternalFrame internalFrame = new Lpasajesxml();

                Principal.jDesktopPane1.add(internalFrame);
                // Calcular la posición para centrar el JInternalFrame
                Dimension desktopSize = Principal.jDesktopPane1.getSize();
                Dimension jInternalFrameSize = internalFrame.getSize();

                int posX = (desktopSize.width - jInternalFrameSize.width) / 2;
                int posY = (desktopSize.height - jInternalFrameSize.height) / 2;

                // Establecer la ubicación centrada
                internalFrame.setLocation(posX, posY);

                internalFrame.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void VerificarComprobante() throws IOException  {
        
        ComprobanteDAO comprobantedao = new ComprobanteDAOImpl();
        ConfiguracionDAO configdao = new ConfiguracionDAOImpl();
        RutaArchivoDAO rutaarchivodao = new RutaArchivoDAOImpl();
        ComprobanteModel comprobanteAct= new ComprobanteModel();
        ConfiguracionModel configuracion = configdao.obtenerConfiguracionPorId(1);
        RutaArchivoModel rutaarchivo = rutaarchivodao.obtenerRutaporEmpresa(configuracion.getRucConf(), "hash");

       
        
        List<ComprobanteModel> comprobantes = comprobantedao.obtenerComprobantesporEstado("XML NO GENERADO");
        System.out.println(comprobantes);
        for (ComprobanteModel comprobante : comprobantes) {
            String nombreArchivo = configuracion.getRucConf() + "-" +comprobante.getTipoComp() +"-" + comprobante.getSerieComp() + ".xml";
            String rutaCompleta = rutaarchivo.getDescRutaArchivo() + nombreArchivo;
            
            File archivo = new File(rutaCompleta);
            if (archivo.exists()) {
              
                    // El archivo existe, puedes realizar la lógica que necesitas
                    System.out.println("El archivo existe en la ruta: " + rutaCompleta);
                   /* JOptionPane.showMessageDialog(null, "El archivo existe en la ruta: " + rutaCompleta, "Informar", JOptionPane.INFORMATION_MESSAGE);
                    
                   
                    comprobanteAct.setEstadoComp("XML GENERADO");
                    comprobanteAct.setSerieComp(comprobante.getSerieComp());
                    comprobantedao.actualizarComprobanteHash(comprobanteAct); */
                

            } else {
                // El archivo no existe
                System.out.println("El archivo no existe en la ruta: " + rutaCompleta);
               // JOptionPane.showMessageDialog(null, "El archivo no existe en la ruta: " + rutaCompleta, "Error", JOptionPane.ERROR_MESSAGE);

            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btncargar;
    private javax.swing.JButton btnpdf;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabpasajes;
    // End of variables declaration//GEN-END:variables
}
