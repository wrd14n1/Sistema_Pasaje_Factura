/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sistemapasajes.View;

import java.awt.Component;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import sistemapasajes.dao.ComprobanteDAO;
import sistemapasajes.dao.ComprobanteDAOImpl;
import sistemapasajes.modelo.ComprobanteModel;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import sistemapasajes.Exporter;
import sistemapasajes.Funciones;

/**
 *
 * @author Edson Cusicuna
 */
public class Reporte extends javax.swing.JInternalFrame {

    ResultSet rs;
    DefaultTableModel dtmBoletas;
    public static String inicio, fin;
    DefaultTableModel modeloTabla;

    public Reporte() {
        initComponents();
        CargarComprobante(inicio, fin);
    }

    private void CargarComprobante(String inic, String fina) {

        modeloTabla = new DefaultTableModel();
        modeloTabla.addColumn("N° Comprobante");
        modeloTabla.addColumn("Tipo Comprobante");
        modeloTabla.addColumn("Razón Social");
        modeloTabla.addColumn("N° Documento");
        modeloTabla.addColumn("Fecha");
        modeloTabla.addColumn("Moneda");
        modeloTabla.addColumn("Monto");
        modeloTabla.addColumn("Fecha XML");
        modeloTabla.addColumn("Fecha de Envio");
        modeloTabla.addColumn("Estado SUNAT");
        ComprobanteDAO comprobantedao = new ComprobanteDAOImpl();
        //List<ComprobanteModel> comprobantes = comprobantedao.obtenerTodosComprobantes();
        List<ComprobanteModel> comprobantes = comprobantedao.reporteComprobante(inic, fina);
        for (ComprobanteModel comprobante : comprobantes) {
            Object[] fila = {
                comprobante.getSerieComp(),
                comprobante.getTipoComp(),
                comprobante.getClienteComp(),
                comprobante.getDocclienteComp(),
                comprobante.getFechaComp(),
                comprobante.getMonedaComp(),
                comprobante.getImptotalComp(),
                comprobante.getFechaxmlComp(),
                comprobante.getFechaenvioComp(),
                comprobante.getEstadoComp(),};
            modeloTabla.addRow(fila);
        }
        tabComprobante.setModel(modeloTabla);
        
            // Ajustar el ancho de las columnas según el contenido
    for (int column = 0; column < tabComprobante.getColumnCount(); column++) {
        TableColumn tableColumn = tabComprobante.getColumnModel().getColumn(column);
        int preferredWidth = 0;
        int maxWidth = 0;
        TableCellRenderer cellRenderer = tabComprobante.getTableHeader().getDefaultRenderer();
        Component headerComponent = cellRenderer.getTableCellRendererComponent(tabComprobante, tableColumn.getHeaderValue(), false, false, 0, 0);
        maxWidth = headerComponent.getPreferredSize().width;
        for (int row = 0; row < tabComprobante.getRowCount(); row++) {
            TableCellRenderer cellRenderer1 = tabComprobante.getCellRenderer(row, column);
            Component c = tabComprobante.prepareRenderer(cellRenderer1, row, column);
            int width = c.getPreferredSize().width + tabComprobante.getIntercellSpacing().width;
            preferredWidth = Math.max(preferredWidth, width);
        }
        tableColumn.setPreferredWidth(Math.max(preferredWidth, maxWidth));
    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnexportar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabComprobante = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        setClosable(true);
        setIconifiable(true);
        setTitle("Lista de Comprobantes");

        btnexportar.setBackground(new java.awt.Color(45, 85, 195));
        btnexportar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnexportar.setForeground(new java.awt.Color(255, 255, 255));
        btnexportar.setText("Exportar");
        btnexportar.setBorder(null);
        btnexportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnexportarActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        tabComprobante.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tabComprobante.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabComprobante.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(tabComprobante);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 717, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnexportar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnexportar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 435, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnexportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnexportarActionPerformed
        if (this.modeloTabla.getRowCount()==0) {
            JOptionPane.showMessageDialog (null, "No hay datos en la tabla para exportar.","Facturación",
                JOptionPane.INFORMATION_MESSAGE);
            //this.cmbConsorcio.grabFocus();
            return;
        }
        JFileChooser chooser=new JFileChooser();
        FileNameExtensionFilter filter=new FileNameExtensionFilter("Archivos de excel","xlsx");
        chooser.setFileFilter(filter);
        chooser.setDialogTitle("Guardar archivo");
        chooser.setMultiSelectionEnabled(false);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showSaveDialog(null)==JFileChooser.APPROVE_OPTION){
            List<JTable> tb=new ArrayList<>();
            List<String>nom=new ArrayList<>();
            tb.add(tabComprobante);
            nom.add("Historial de Boletas");
            String file=chooser.getSelectedFile().toString().concat(".xls");
            try {
                Exporter e=new Exporter(new File(file),tb, nom);
                if (e.export()) {
                    JOptionPane.showMessageDialog(null, "Los datos fueron exportados a excel.","Facturación",
                        JOptionPane.INFORMATION_MESSAGE);

                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null,"Hubo un error"+ex.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnexportarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnexportar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabComprobante;
    // End of variables declaration//GEN-END:variables
}
